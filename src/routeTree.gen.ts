/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProfileImport } from './routes/profile'
import { Route as ErrorImport } from './routes/error'
import { Route as AboutImport } from './routes/about'
import { Route as UserLayoutImport } from './routes/$user/layout'
import { Route as IndexImport } from './routes/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as UserIndexImport } from './routes/$user/index'
import { Route as UserStarredIndexImport } from './routes/$user/starred/index'
import { Route as UserSearchIndexImport } from './routes/$user/search/index'
import { Route as UserRepositoriesIndexImport } from './routes/$user/repositories/index'
import { Route as UserFollowingIndexImport } from './routes/$user/following/index'
import { Route as UserFollowersIndexImport } from './routes/$user/followers/index'
import { Route as UserRepositoriesRepoIndexImport } from './routes/$user/repositories/$repo/index'

// Create/Update Routes

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const ErrorRoute = ErrorImport.update({
  id: '/error',
  path: '/error',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const UserLayoutRoute = UserLayoutImport.update({
  id: '/$user',
  path: '/$user',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const UserIndexRoute = UserIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UserLayoutRoute,
} as any)

const UserStarredIndexRoute = UserStarredIndexImport.update({
  id: '/starred/',
  path: '/starred/',
  getParentRoute: () => UserLayoutRoute,
} as any)

const UserSearchIndexRoute = UserSearchIndexImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => UserLayoutRoute,
} as any)

const UserRepositoriesIndexRoute = UserRepositoriesIndexImport.update({
  id: '/repositories/',
  path: '/repositories/',
  getParentRoute: () => UserLayoutRoute,
} as any)

const UserFollowingIndexRoute = UserFollowingIndexImport.update({
  id: '/following/',
  path: '/following/',
  getParentRoute: () => UserLayoutRoute,
} as any)

const UserFollowersIndexRoute = UserFollowersIndexImport.update({
  id: '/followers/',
  path: '/followers/',
  getParentRoute: () => UserLayoutRoute,
} as any)

const UserRepositoriesRepoIndexRoute = UserRepositoriesRepoIndexImport.update({
  id: '/repositories/$repo/',
  path: '/repositories/$repo/',
  getParentRoute: () => UserLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$user': {
      id: '/$user'
      path: '/$user'
      fullPath: '/$user'
      preLoaderRoute: typeof UserLayoutImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/error': {
      id: '/error'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/$user/': {
      id: '/$user/'
      path: '/'
      fullPath: '/$user/'
      preLoaderRoute: typeof UserIndexImport
      parentRoute: typeof UserLayoutImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/$user/followers/': {
      id: '/$user/followers/'
      path: '/followers'
      fullPath: '/$user/followers'
      preLoaderRoute: typeof UserFollowersIndexImport
      parentRoute: typeof UserLayoutImport
    }
    '/$user/following/': {
      id: '/$user/following/'
      path: '/following'
      fullPath: '/$user/following'
      preLoaderRoute: typeof UserFollowingIndexImport
      parentRoute: typeof UserLayoutImport
    }
    '/$user/repositories/': {
      id: '/$user/repositories/'
      path: '/repositories'
      fullPath: '/$user/repositories'
      preLoaderRoute: typeof UserRepositoriesIndexImport
      parentRoute: typeof UserLayoutImport
    }
    '/$user/search/': {
      id: '/$user/search/'
      path: '/search'
      fullPath: '/$user/search'
      preLoaderRoute: typeof UserSearchIndexImport
      parentRoute: typeof UserLayoutImport
    }
    '/$user/starred/': {
      id: '/$user/starred/'
      path: '/starred'
      fullPath: '/$user/starred'
      preLoaderRoute: typeof UserStarredIndexImport
      parentRoute: typeof UserLayoutImport
    }
    '/$user/repositories/$repo/': {
      id: '/$user/repositories/$repo/'
      path: '/repositories/$repo'
      fullPath: '/$user/repositories/$repo'
      preLoaderRoute: typeof UserRepositoriesRepoIndexImport
      parentRoute: typeof UserLayoutImport
    }
  }
}

// Create and export the route tree

interface UserLayoutRouteChildren {
  UserIndexRoute: typeof UserIndexRoute
  UserFollowersIndexRoute: typeof UserFollowersIndexRoute
  UserFollowingIndexRoute: typeof UserFollowingIndexRoute
  UserRepositoriesIndexRoute: typeof UserRepositoriesIndexRoute
  UserSearchIndexRoute: typeof UserSearchIndexRoute
  UserStarredIndexRoute: typeof UserStarredIndexRoute
  UserRepositoriesRepoIndexRoute: typeof UserRepositoriesRepoIndexRoute
}

const UserLayoutRouteChildren: UserLayoutRouteChildren = {
  UserIndexRoute: UserIndexRoute,
  UserFollowersIndexRoute: UserFollowersIndexRoute,
  UserFollowingIndexRoute: UserFollowingIndexRoute,
  UserRepositoriesIndexRoute: UserRepositoriesIndexRoute,
  UserSearchIndexRoute: UserSearchIndexRoute,
  UserStarredIndexRoute: UserStarredIndexRoute,
  UserRepositoriesRepoIndexRoute: UserRepositoriesRepoIndexRoute,
}

const UserLayoutRouteWithChildren = UserLayoutRoute._addFileChildren(
  UserLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$user': typeof UserLayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/error': typeof ErrorRoute
  '/profile': typeof ProfileRoute
  '/$user/': typeof UserIndexRoute
  '/auth': typeof AuthIndexRoute
  '/$user/followers': typeof UserFollowersIndexRoute
  '/$user/following': typeof UserFollowingIndexRoute
  '/$user/repositories': typeof UserRepositoriesIndexRoute
  '/$user/search': typeof UserSearchIndexRoute
  '/$user/starred': typeof UserStarredIndexRoute
  '/$user/repositories/$repo': typeof UserRepositoriesRepoIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/error': typeof ErrorRoute
  '/profile': typeof ProfileRoute
  '/$user': typeof UserIndexRoute
  '/auth': typeof AuthIndexRoute
  '/$user/followers': typeof UserFollowersIndexRoute
  '/$user/following': typeof UserFollowingIndexRoute
  '/$user/repositories': typeof UserRepositoriesIndexRoute
  '/$user/search': typeof UserSearchIndexRoute
  '/$user/starred': typeof UserStarredIndexRoute
  '/$user/repositories/$repo': typeof UserRepositoriesRepoIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$user': typeof UserLayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/error': typeof ErrorRoute
  '/profile': typeof ProfileRoute
  '/$user/': typeof UserIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/$user/followers/': typeof UserFollowersIndexRoute
  '/$user/following/': typeof UserFollowingIndexRoute
  '/$user/repositories/': typeof UserRepositoriesIndexRoute
  '/$user/search/': typeof UserSearchIndexRoute
  '/$user/starred/': typeof UserStarredIndexRoute
  '/$user/repositories/$repo/': typeof UserRepositoriesRepoIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$user'
    | '/about'
    | '/error'
    | '/profile'
    | '/$user/'
    | '/auth'
    | '/$user/followers'
    | '/$user/following'
    | '/$user/repositories'
    | '/$user/search'
    | '/$user/starred'
    | '/$user/repositories/$repo'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/error'
    | '/profile'
    | '/$user'
    | '/auth'
    | '/$user/followers'
    | '/$user/following'
    | '/$user/repositories'
    | '/$user/search'
    | '/$user/starred'
    | '/$user/repositories/$repo'
  id:
    | '__root__'
    | '/'
    | '/$user'
    | '/about'
    | '/error'
    | '/profile'
    | '/$user/'
    | '/auth/'
    | '/$user/followers/'
    | '/$user/following/'
    | '/$user/repositories/'
    | '/$user/search/'
    | '/$user/starred/'
    | '/$user/repositories/$repo/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UserLayoutRoute: typeof UserLayoutRouteWithChildren
  AboutRoute: typeof AboutRoute
  ErrorRoute: typeof ErrorRoute
  ProfileRoute: typeof ProfileRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UserLayoutRoute: UserLayoutRouteWithChildren,
  AboutRoute: AboutRoute,
  ErrorRoute: ErrorRoute,
  ProfileRoute: ProfileRoute,
  AuthIndexRoute: AuthIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$user",
        "/about",
        "/error",
        "/profile",
        "/auth/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$user": {
      "filePath": "$user/layout.tsx",
      "children": [
        "/$user/",
        "/$user/followers/",
        "/$user/following/",
        "/$user/repositories/",
        "/$user/search/",
        "/$user/starred/",
        "/$user/repositories/$repo/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/error": {
      "filePath": "error.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/$user/": {
      "filePath": "$user/index.tsx",
      "parent": "/$user"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/$user/followers/": {
      "filePath": "$user/followers/index.tsx",
      "parent": "/$user"
    },
    "/$user/following/": {
      "filePath": "$user/following/index.tsx",
      "parent": "/$user"
    },
    "/$user/repositories/": {
      "filePath": "$user/repositories/index.tsx",
      "parent": "/$user"
    },
    "/$user/search/": {
      "filePath": "$user/search/index.tsx",
      "parent": "/$user"
    },
    "/$user/starred/": {
      "filePath": "$user/starred/index.tsx",
      "parent": "/$user"
    },
    "/$user/repositories/$repo/": {
      "filePath": "$user/repositories/$repo/index.tsx",
      "parent": "/$user"
    }
  }
}
ROUTE_MANIFEST_END */
